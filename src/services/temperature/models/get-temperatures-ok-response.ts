// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { error, errorRequest, errorResponse } from '../../common/error';
import { temperatureGet, temperatureGetRequest, temperatureGetResponse } from '../../common/temperature-get';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getTemperaturesOkResponse = z.object({
  errors: z.array(error).optional(),
  data: z.array(temperatureGet).optional(),
});

/**
 *
 * @typedef  {GetTemperaturesOkResponse} getTemperaturesOkResponse
 * @property {Error[]}
 * @property {TemperatureGet[]}
 */
export type GetTemperaturesOkResponse = z.infer<typeof getTemperaturesOkResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getTemperaturesOkResponseResponse = z
  .object({
    errors: z.array(errorResponse).optional(),
    data: z.array(temperatureGetResponse).optional(),
  })
  .transform((data) => ({
    errors: data['errors'],
    data: data['data'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getTemperaturesOkResponseRequest = z
  .object({ errors: z.array(errorRequest).nullish(), data: z.array(temperatureGetRequest).nullish() })
  .transform((data) => ({
    errors: data['errors'],
    data: data['data'],
  }));
