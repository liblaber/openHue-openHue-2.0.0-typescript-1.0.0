// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { supportedEffects } from './supported-effects';

/**
 * The shape of the model inside the application code - what the users use
 */
export const actionEffects1 = z.object({
  effect: supportedEffects.optional(),
});

/**
 * Basic feature containing effect properties.
 * @typedef  {ActionEffects1} actionEffects1 - Basic feature containing effect properties. - Basic feature containing effect properties.
 * @property {SupportedEffects}
 */
export type ActionEffects1 = z.infer<typeof actionEffects1>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const actionEffects1Response = z
  .object({
    effect: supportedEffects.optional(),
  })
  .transform((data) => ({
    effect: data['effect'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const actionEffects1Request = z.object({ effect: supportedEffects.nullish() }).transform((data) => ({
  effect: data['effect'],
}));
