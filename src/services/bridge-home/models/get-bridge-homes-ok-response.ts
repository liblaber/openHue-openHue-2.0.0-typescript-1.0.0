// This file was generated by liblab | https://liblab.com/

import { z } from 'zod';
import { error, errorRequest, errorResponse } from '../../common/error';
import { bridgeHomeGet, bridgeHomeGetRequest, bridgeHomeGetResponse } from '../../common/bridge-home-get';

/**
 * The shape of the model inside the application code - what the users use
 */
export const getBridgeHomesOkResponse = z.object({
  errors: z.array(error).optional(),
  data: z.array(bridgeHomeGet).optional(),
});

/**
 *
 * @typedef  {GetBridgeHomesOkResponse} getBridgeHomesOkResponse
 * @property {Error[]}
 * @property {BridgeHomeGet[]}
 */
export type GetBridgeHomesOkResponse = z.infer<typeof getBridgeHomesOkResponse>;

/**
 * The shape of the model mapping from the api schema into the application shape.
 * Is equal to application shape if all property names match the api schema
 */
export const getBridgeHomesOkResponseResponse = z
  .object({
    errors: z.array(errorResponse).optional(),
    data: z.array(bridgeHomeGetResponse).optional(),
  })
  .transform((data) => ({
    errors: data['errors'],
    data: data['data'],
  }));

/**
 * The shape of the model mapping from the application shape into the api schema.
 * Is equal to application shape if all property names match the api schema
 */
export const getBridgeHomesOkResponseRequest = z
  .object({ errors: z.array(errorRequest).nullish(), data: z.array(bridgeHomeGetRequest).nullish() })
  .transform((data) => ({
    errors: data['errors'],
    data: data['data'],
  }));
